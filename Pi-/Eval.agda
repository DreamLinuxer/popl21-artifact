module Pi-.Eval where
open import Data.Empty
open import Data.Unit
open import Data.Sum
open import Data.Product
open import Relation.Binary.Core
open import Relation.Binary
open import Relation.Nullary
open import Relation.Binary.PropositionalEquality
open import Data.Nat
open import Data.Nat.Properties
open import Data.List as L hiding (_‚à∑_)
open import Function using (_‚àò_)
open import Pi-.Syntax
open import Pi-.Opsem
open import Pi-.NoRepeat
open import Pi-.Invariants

infix 100 _‚Éó
infix 100 _‚Éñ

-- Stuck states must be either of the form Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ or Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ‚ñ∑
Stuck : ‚àÄ {st} ‚Üí is-stuck st
      ‚Üí (Œ£[ A ‚àà ùïå ] Œ£[ B ‚àà ùïå ] Œ£[ c ‚àà A ‚Üî B ] Œ£[ v ‚àà ‚ü¶ A ‚üß ] st ‚â° ‚ü® c ‚à£ v ‚à£ ‚òê ‚ü©‚óÅ)
      ‚äé (Œ£[ A ‚àà ùïå ] Œ£[ B ‚àà ùïå ] Œ£[ c ‚àà A ‚Üî B ] Œ£[ v ‚àà ‚ü¶ B ‚üß ] st ‚â° Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ‚ñ∑)
Stuck {‚ü® unite‚Çäl ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® uniti‚Çäl ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® swap‚Çä   ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® assocl‚Çä ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® assocr‚Çä ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® unite‚ãÜl ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® uniti‚ãÜl ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® swap‚ãÜ   ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® assocl‚ãÜ ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® assocr‚ãÜ ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® dist    ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® factor  ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ))
Stuck {‚ü® id‚Üî     ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÇ))
Stuck {‚ü® c‚ÇÅ ‚®æ c‚ÇÇ ‚à£ v          ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÉ))
Stuck {‚ü® c‚ÇÅ ‚äï c‚ÇÇ ‚à£ inj‚ÇÅ x     ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÑ))
Stuck {‚ü® c‚ÇÅ ‚äï c‚ÇÇ ‚à£ inj‚ÇÇ y     ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÖ))
Stuck {‚ü® c‚ÇÅ ‚äó c‚ÇÇ ‚à£ (x , y)    ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÜ))
Stuck {‚ü® Œµ‚Çä      ‚à£ inj‚ÇÅ x     ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶Œµ‚ÇÅ))
Stuck {‚ü® Œµ‚Çä      ‚à£ inj‚ÇÇ (- x) ‚à£ Œ∫ ‚ü©‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶Œµ‚ÇÇ))
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ‚ñ∑}               stuck = inj‚ÇÇ (_ , _ , c , v , refl)
Stuck {Ôºª c‚ÇÅ ‚à£ v ‚à£ ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫ ÔºΩ‚ñ∑}      stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚Çá))
Stuck {Ôºª c ‚à£ v ‚à£ c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫ ÔºΩ‚ñ∑}        stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ‚ÇÄ))
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫ ÔºΩ‚ñ∑}       stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ‚ÇÅ))
Stuck {Ôºª c ‚à£ v ‚à£ c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫ ÔºΩ‚ñ∑}        stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚ÇÅ‚ÇÇ))
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê‚äó[ c‚ÇÇ , x ]‚Ä¢ Œ∫ ÔºΩ‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚Çà))
Stuck {Ôºª c ‚à£ v ‚à£ [ c‚ÇÅ , x ]‚äó‚òê‚Ä¢ Œ∫ ÔºΩ‚ñ∑} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éó‚Çâ))
Stuck {‚ü® c  ‚à£ v ‚à£ ‚òê ‚ü©‚óÅ}                stuck = inj‚ÇÅ (_ , _ , c , v , refl)
Stuck {‚ü® c‚ÇÅ ‚à£ v ‚à£ ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫ ‚ü©‚óÅ}        stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚ÇÉ))
Stuck {‚ü® c‚ÇÇ ‚à£ v ‚à£ c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫ ‚ü©‚óÅ}         stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚Çá))
Stuck {‚ü® c‚ÇÅ ‚à£ v ‚à£ ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫ ‚ü©‚óÅ}        stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚ÇÑ))
Stuck {‚ü® c‚ÇÇ ‚à£ v ‚à£ c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫ ‚ü©‚óÅ}         stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚ÇÖ))
Stuck {‚ü® c‚ÇÅ ‚à£ x ‚à£ ‚òê‚äó[ c‚ÇÇ , y ]‚Ä¢ Œ∫ ‚ü©‚óÅ}  stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚ÇÜ))
Stuck {‚ü® c‚ÇÇ ‚à£ y ‚à£ [ c‚ÇÅ , x ]‚äó‚òê‚Ä¢ Œ∫ ‚ü©‚óÅ}  stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚Çà))
Stuck {Ôºª unite‚Çäl ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ}             stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÇ v ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª uniti‚Çäl ‚à£ inj‚ÇÇ y ‚à£ Œ∫ ÔºΩ‚óÅ}        stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ y ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª swap‚Çä ‚à£ inj‚ÇÅ x ‚à£ Œ∫ ÔºΩ‚óÅ}          stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÇ x ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª swap‚Çä ‚à£ inj‚ÇÇ y ‚à£ Œ∫ ÔºΩ‚óÅ}          stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÅ y ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª assocl‚Çä ‚à£ inj‚ÇÅ (inj‚ÇÅ x) ‚à£ Œ∫ ÔºΩ‚óÅ} stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÅ x ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª assocl‚Çä ‚à£ inj‚ÇÅ (inj‚ÇÇ y) ‚à£ Œ∫ ÔºΩ‚óÅ} stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÇ (inj‚ÇÅ y) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª assocl‚Çä ‚à£ inj‚ÇÇ y ‚à£ Œ∫ ÔºΩ‚óÅ}        stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÇ (inj‚ÇÇ y) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª assocr‚Çä ‚à£ inj‚ÇÅ x ‚à£ Œ∫ ÔºΩ‚óÅ}        stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÅ (inj‚ÇÅ x) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª assocr‚Çä ‚à£ inj‚ÇÇ (inj‚ÇÅ x) ‚à£ Œ∫ ÔºΩ‚óÅ} stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÅ (inj‚ÇÇ x) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª assocr‚Çä ‚à£ inj‚ÇÇ (inj‚ÇÇ y) ‚à£ Œ∫ ÔºΩ‚óÅ} stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ (inj‚ÇÇ y) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª unite‚ãÜl ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ}             stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ (tt , v) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª uniti‚ãÜl ‚à£ (tt , v) ‚à£ Œ∫ ÔºΩ‚óÅ}      stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ v ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª swap‚ãÜ ‚à£ (x , y) ‚à£ Œ∫ ÔºΩ‚óÅ}         stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ (y , x) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª assocl‚ãÜ ‚à£ (x , y) , z ‚à£ Œ∫ ÔºΩ‚óÅ}   stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ x , (y , z) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª assocr‚ãÜ ‚à£ x , (y , z) ‚à£ Œ∫ ÔºΩ‚óÅ}   stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ (x , y) , z ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª dist ‚à£ inj‚ÇÅ (x , z) ‚à£ Œ∫ ÔºΩ‚óÅ}     stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÅ x , z ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª dist ‚à£ inj‚ÇÇ (y , z) ‚à£ Œ∫ ÔºΩ‚óÅ}     stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÇ y , z ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª factor ‚à£ inj‚ÇÅ x , z ‚à£ Œ∫ ÔºΩ‚óÅ}     stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÅ (x , z) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª factor ‚à£ inj‚ÇÇ y , z ‚à£ Œ∫ ÔºΩ‚óÅ}     stuck = ‚ä•-elim (stuck (‚ü® _ ‚à£ inj‚ÇÇ (y , z) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ))
Stuck {Ôºª id‚Üî     ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ}             stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚ÇÇ))
Stuck {Ôºª c‚ÇÅ ‚®æ c‚ÇÇ ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ}             stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚ÇÅ‚ÇÄ))
Stuck {Ôºª c‚ÇÅ ‚äï c‚ÇÇ ‚à£ inj‚ÇÅ x ‚à£ Œ∫ ÔºΩ‚óÅ}        stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚ÇÅ‚ÇÅ))
Stuck {Ôºª c‚ÇÅ ‚äï c‚ÇÇ ‚à£ inj‚ÇÇ y ‚à£ Œ∫ ÔºΩ‚óÅ}        stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚ÇÅ‚ÇÇ))
Stuck {Ôºª c‚ÇÅ ‚äó c‚ÇÇ ‚à£ (x , y) ‚à£ Œ∫ ÔºΩ‚óÅ}       stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Éñ‚Çâ))
Stuck {Ôºª Œ∑‚Çä      ‚à£ inj‚ÇÅ x ‚à£ Œ∫ ÔºΩ‚óÅ}        stuck = ‚ä•-elim (stuck (_ , ‚Ü¶Œ∑‚ÇÅ))
Stuck {Ôºª Œ∑‚Çä      ‚à£ inj‚ÇÇ (- x) ‚à£ Œ∫ ÔºΩ‚óÅ}    stuck = ‚ä•-elim (stuck (_ , ‚Ü¶Œ∑‚ÇÇ))

-- Find next step of given the state
step : (st : State) ‚Üí ‚àÉ[ st' ] (st ‚Ü¶ st') ‚äé is-stuck st
step ‚ü® unite‚Çäl ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® uniti‚Çäl ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® swap‚Çä   ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® assocl‚Çä ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® assocr‚Çä ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® unite‚ãÜl ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® uniti‚ãÜl ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® swap‚ãÜ   ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® assocl‚ãÜ ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® assocr‚ãÜ ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® dist    ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® factor  ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ)
step ‚ü® id‚Üî     ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÇ)
step ‚ü® c‚ÇÅ ‚®æ c‚ÇÇ ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (‚ü® c‚ÇÅ ‚à£ v ‚à£ ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫ ‚ü©‚ñ∑ , ‚Ü¶‚Éó‚ÇÉ)
step ‚ü® c‚ÇÅ ‚äï c‚ÇÇ ‚à£ inj‚ÇÅ x ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÑ)
step ‚ü® c‚ÇÅ ‚äï c‚ÇÇ ‚à£ inj‚ÇÇ y ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÖ)
step ‚ü® c‚ÇÅ ‚äó c‚ÇÇ ‚à£ (x , y) ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÜ)
step ‚ü® Œµ‚Çä      ‚à£ inj‚ÇÅ x ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶Œµ‚ÇÅ)
step ‚ü® Œµ‚Çä      ‚à£ inj‚ÇÇ (- x) ‚à£ Œ∫ ‚ü©‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶Œµ‚ÇÇ)
step Ôºª c  ‚à£ v ‚à£ ‚òê ÔºΩ‚ñ∑               = inj‚ÇÇ (Œª ())
step Ôºª c‚ÇÅ ‚à£ v ‚à£ ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫ ÔºΩ‚ñ∑       = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚Çá)
step Ôºª c‚ÇÇ ‚à£ v ‚à£ c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫ ÔºΩ‚ñ∑        = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ‚ÇÄ)
step Ôºª c‚ÇÅ ‚à£ v ‚à£ ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫ ÔºΩ‚ñ∑       = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ‚ÇÅ)
step Ôºª c‚ÇÇ ‚à£ v ‚à£ c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫ ÔºΩ‚ñ∑        = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚ÇÅ‚ÇÇ)
step Ôºª c‚ÇÅ ‚à£ v ‚à£ ‚òê‚äó[ c‚ÇÇ , x ]‚Ä¢ Œ∫ ÔºΩ‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚Çà)
step Ôºª c‚ÇÇ ‚à£ v ‚à£ [ c‚ÇÅ , x ]‚äó‚òê‚Ä¢ Œ∫ ÔºΩ‚ñ∑ = inj‚ÇÅ (_ , ‚Ü¶‚Éó‚Çâ)
step ‚ü® c ‚à£ v ‚à£ ‚òê ‚ü©‚óÅ                = inj‚ÇÇ (Œª ())
step ‚ü® c‚ÇÅ ‚à£ v ‚à£ ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫ ‚ü©‚óÅ       = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚ÇÉ)
step ‚ü® c‚ÇÇ ‚à£ v ‚à£ c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫ ‚ü©‚óÅ        = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚Çá)
step ‚ü® c‚ÇÅ ‚à£ v ‚à£ ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫ ‚ü©‚óÅ       = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚ÇÑ)
step ‚ü® c‚ÇÇ ‚à£ v ‚à£ c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫ ‚ü©‚óÅ        = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚ÇÖ)
step ‚ü® c‚ÇÅ ‚à£ v ‚à£ ‚òê‚äó[ c‚ÇÇ , x ]‚Ä¢ Œ∫ ‚ü©‚óÅ = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚ÇÜ)
step ‚ü® c‚ÇÇ ‚à£ v ‚à£ [ c‚ÇÅ , x ]‚äó‚òê‚Ä¢ Œ∫ ‚ü©‚óÅ = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚Çà)
step Ôºª unite‚Çäl ‚à£ v             ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÇ v ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª uniti‚Çäl ‚à£ inj‚ÇÇ v        ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ v ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª swap‚Çä   ‚à£ inj‚ÇÅ x        ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÇ x ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª swap‚Çä   ‚à£ inj‚ÇÇ y        ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÅ y ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª assocl‚Çä ‚à£ inj‚ÇÅ (inj‚ÇÅ x) ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÅ x ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª assocl‚Çä ‚à£ inj‚ÇÅ (inj‚ÇÇ y) ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÇ (inj‚ÇÅ y) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª assocl‚Çä ‚à£ inj‚ÇÇ z        ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÇ (inj‚ÇÇ z) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª assocr‚Çä ‚à£ inj‚ÇÅ x        ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÅ (inj‚ÇÅ x) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª assocr‚Çä ‚à£ inj‚ÇÇ (inj‚ÇÅ y) ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÅ (inj‚ÇÇ y) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª assocr‚Çä ‚à£ inj‚ÇÇ (inj‚ÇÇ z) ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÇ z ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª unite‚ãÜl ‚à£ v             ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ tt , v ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª uniti‚ãÜl ‚à£ (tt , v)      ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ v ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª swap‚ãÜ   ‚à£ (x , y)       ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ (y , x) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª assocl‚ãÜ ‚à£ (x , y) , z   ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ x , (y , z) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª assocr‚ãÜ ‚à£ x , (y , z)   ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ (x , y) , z ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª dist    ‚à£ inj‚ÇÅ (x , z)  ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÅ x , z ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª dist    ‚à£ inj‚ÇÇ (y , z)  ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÇ y , z ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª factor  ‚à£ inj‚ÇÅ x , z    ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÅ (x , z) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª factor  ‚à£ inj‚ÇÇ y , z    ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (‚ü® _ ‚à£ inj‚ÇÇ (y , z) ‚à£ _ ‚ü©‚óÅ , ‚Ü¶‚Éñ‚ÇÅ)
step Ôºª id‚Üî     ‚à£ v             ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚ÇÇ)
step Ôºª c‚ÇÅ ‚®æ c‚ÇÇ ‚à£ v             ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚ÇÅ‚ÇÄ)
step Ôºª c‚ÇÅ ‚äï c‚ÇÇ ‚à£ inj‚ÇÅ x        ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚ÇÅ‚ÇÅ)
step Ôºª c‚ÇÅ ‚äï c‚ÇÇ ‚à£ inj‚ÇÇ y        ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚ÇÅ‚ÇÇ)
step Ôºª c‚ÇÅ ‚äó c‚ÇÇ ‚à£ (x , y)       ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (_ , ‚Ü¶‚Éñ‚Çâ)
step Ôºª Œ∑‚Çä ‚à£ inj‚ÇÅ x             ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (_ , ‚Ü¶Œ∑‚ÇÅ)
step Ôºª Œ∑‚Çä ‚à£ inj‚ÇÇ (- x)         ‚à£ Œ∫ ÔºΩ‚óÅ = inj‚ÇÅ (_ , ‚Ü¶Œ∑‚ÇÇ)

-- Values tagged with direction
data Val (A B : ùïå) : Set where
  _‚Éó : ‚ü¶ A ‚üß ‚Üí Val A B
  _‚Éñ : ‚ü¶ B ‚üß ‚Üí Val A B

-- Termination is guaranteed by Pi-.NoRepeat and the finiteness of states
{-# TERMINATING #-}
run : (st‚ÇÄ : State) ‚Üí is-initial st‚ÇÄ ‚Üí let (A , B , c) = get‚ÑÇ st‚ÇÄ
                                       in  (Œ£[ v ‚àà ‚ü¶ A ‚üß ] st‚ÇÄ ‚Ü¶* ‚ü® c ‚à£ v ‚à£ ‚òê ‚ü©‚óÅ)
                                        ‚äé  (Œ£[ v ‚àà ‚ü¶ B ‚üß ] st‚ÇÄ ‚Ü¶* Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ‚ñ∑)
run st‚ÇÄ init = run' st‚ÇÄ ‚óæ
  where
    run' : (st : State) ‚Üí st‚ÇÄ ‚Ü¶* st ‚Üí let (A , B , c) = get‚ÑÇ st‚ÇÄ
                                      in (Œ£[ v ‚àà ‚ü¶ A ‚üß ] st‚ÇÄ ‚Ü¶* ‚ü® c ‚à£ v ‚à£ ‚òê ‚ü©‚óÅ)
                                       ‚äé (Œ£[ v ‚àà ‚ü¶ B ‚üß ] st‚ÇÄ ‚Ü¶* Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ‚ñ∑)
    run' st rs with step st
    ... | inj‚ÇÅ (st' , r) = run' st' (rs ++‚Ü¶ (r ‚à∑ ‚óæ))
    ... | inj‚ÇÇ stuck     with Stuck stuck
    ... | inj‚ÇÅ (A , B , c , v , refl) with ‚ÑÇInvariant* rs
    ... | refl = inj‚ÇÅ (v , rs)
    run' st rs | inj‚ÇÇ stuck | inj‚ÇÇ (A , B , c , v , refl) with ‚ÑÇInvariant* rs
    ... | refl = inj‚ÇÇ (v , rs)

-- Forward evaluator of Pi-
eval : ‚àÄ {A B} ‚Üí (A ‚Üî B) ‚Üí Val A B ‚Üí Val B A
eval c (v ‚Éó) = [ _‚Éñ ‚àò proj‚ÇÅ , _‚Éó ‚àò proj‚ÇÅ ]‚Ä≤ (run ‚ü® c ‚à£ v ‚à£ ‚òê ‚ü©‚ñ∑ (Œª ()))
eval c (v ‚Éñ) = [ _‚Éñ ‚àò proj‚ÇÅ , _‚Éó ‚àò proj‚ÇÅ ]‚Ä≤ (run Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ‚óÅ (Œª ()))

-- Backward evaluator of Pi-
eval·µ£‚Çë·µ• : ‚àÄ {A B} ‚Üí (A ‚Üî B) ‚Üí Val B A ‚Üí Val A B
eval·µ£‚Çë·µ• c (v ‚Éñ) = [ _‚Éó ‚àò proj‚ÇÅ , _‚Éñ ‚àò proj‚ÇÅ ]‚Ä≤ (run ‚ü® c ‚à£ v ‚à£ ‚òê ‚ü©‚ñ∑ (Œª ()))
eval·µ£‚Çë·µ• c (v ‚Éó) = [ _‚Éó ‚àò proj‚ÇÅ , _‚Éñ ‚àò proj‚ÇÅ ]‚Ä≤ (run Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ‚óÅ (Œª ()))

-- Evaluator which generate execution traces
convert‚Ü¶ : ‚àÄ {st st'} ‚Üí st ‚Ü¶* st' ‚Üí List State
convert‚Ü¶ (‚óæ {st}) = st L.‚à∑ []
convert‚Ü¶ (_‚à∑_ {st} r rs) = st L.‚à∑ convert‚Ü¶ rs

eval‚Çú·µ£ : ‚àÄ {A B} ‚Üí (A ‚Üî B) ‚Üí ‚ü¶ A ‚üß ‚Üí List State
eval‚Çú·µ£ c v with (run ‚ü® c ‚à£ v ‚à£ ‚òê ‚ü©‚ñ∑ (Œª ()))
... | inj‚ÇÅ (_ , rs) = convert‚Ü¶ rs
... | inj‚ÇÇ (_ , rs) = convert‚Ü¶ rs

-- Faster evaluator which does not carry the reduction trace.
-- Returns the result and the number of steps it takes
{-# TERMINATING #-}
eval' : ‚àÄ {A B} ‚Üí (A ‚Üî B) ‚Üí ‚ü¶ A ‚üß ‚Üí (Œ£[ t ‚àà ùïå ] ‚ü¶ t ‚üß) √ó ‚Ñï
eval' c v = run' ‚ü® c ‚à£ v ‚à£ ‚òê ‚ü©‚ñ∑ 0
  where
  getV : State ‚Üí Œ£[ t ‚àà ùïå ] ‚ü¶ t ‚üß
  getV ‚ü® _ ‚à£ v ‚à£ _ ‚ü©‚ñ∑ = _ , v
  getV Ôºª _ ‚à£ v ‚à£ _ ÔºΩ‚ñ∑ = _ , v
  getV ‚ü® _ ‚à£ v ‚à£ _ ‚ü©‚óÅ = _ , v
  getV Ôºª _ ‚à£ v ‚à£ _ ÔºΩ‚óÅ = _ , v

  run' : State ‚Üí ‚Ñï ‚Üí (Œ£[ t ‚àà ùïå ] ‚ü¶ t ‚üß) √ó ‚Ñï
  run' st n with step st
  ... | inj‚ÇÅ (st' , _) = run' st' (suc n)
  ... | inj‚ÇÇ stuck     = getV st , n
