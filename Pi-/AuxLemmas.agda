module Pi-.AuxLemmas where
open import Data.Empty
open import Data.Unit
open import Data.Sum
open import Data.Product
open import Relation.Binary.Core
open import Relation.Binary
open import Relation.Nullary
open import Relation.Binary.PropositionalEquality
open import Data.Nat
open import Data.Nat.Properties
open import Data.List as L
open import Function using (_‚àò_)
open import Pi-.Syntax
open import Pi-.Opsem

Lemma‚ÇÅ : ‚àÄ {A B C D v v' Œ∫ Œ∫'} {c : A ‚Üî B} {c' : C ‚Üî D}
       ‚Üí Ôºª c ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ ‚Ü¶ ‚ü® c' ‚à£ v' ‚à£ Œ∫' ‚ü©‚óÅ
       ‚Üí A ‚â° C √ó B ‚â° D
Lemma‚ÇÅ ‚Ü¶‚Éñ‚ÇÅ = refl , refl
Lemma‚ÇÅ ‚Ü¶‚Éñ‚ÇÇ = refl , refl

Lemma‚ÇÇ : ‚àÄ {A B v v' Œ∫ Œ∫'} {c c' : A ‚Üî B}
       ‚Üí Ôºª c ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ ‚Ü¶ ‚ü® c' ‚à£ v' ‚à£ Œ∫' ‚ü©‚óÅ
       ‚Üí c ‚â° c' √ó Œ∫ ‚â° Œ∫'
Lemma‚ÇÇ ‚Ü¶‚Éñ‚ÇÅ = refl , refl
Lemma‚ÇÇ ‚Ü¶‚Éñ‚ÇÇ = refl , refl

Lemma‚ÇÉ : ‚àÄ {A B v v' Œ∫} {c : A ‚Üî B}
       ‚Üí Ôºª c ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ ‚Ü¶ ‚ü® c ‚à£ v' ‚à£ Œ∫ ‚ü©‚óÅ
       ‚Üí base c ‚äé A ‚â° B
Lemma‚ÇÉ (‚Ü¶‚Éñ‚ÇÅ {b = b}) = inj‚ÇÅ b
Lemma‚ÇÉ ‚Ü¶‚Éñ‚ÇÇ = inj‚ÇÇ refl

Lemma‚ÇÑ : ‚àÄ {A v v' Œ∫} {c : A ‚Üî A}
       ‚Üí Ôºª c ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ ‚Ü¶ ‚ü® c ‚à£ v' ‚à£ Œ∫ ‚ü©‚óÅ
       ‚Üí base c ‚äé c ‚â° id‚Üî
Lemma‚ÇÑ (‚Ü¶‚Éñ‚ÇÅ {b = b}) = inj‚ÇÅ b
Lemma‚ÇÑ ‚Ü¶‚Éñ‚ÇÇ = inj‚ÇÇ refl

Lemma‚ÇÖ : ‚àÄ {A B C D v v' Œ∫ Œ∫'} {c : A ‚Üî B} {c' : C ‚Üî D}
       ‚Üí Ôºª c ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ ‚Ü¶ Ôºª c' ‚à£ v' ‚à£ Œ∫' ÔºΩ‚ñ∑
       ‚Üí A ‚â° C √ó B ‚â° D
Lemma‚ÇÖ ‚Ü¶Œ∑‚ÇÅ = refl , refl
Lemma‚ÇÖ ‚Ü¶Œ∑‚ÇÇ = refl , refl

Lemma‚ÇÜ : ‚àÄ {A B v v' Œ∫ Œ∫'} {c c' : A ‚Üî B}
       ‚Üí Ôºª c ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ ‚Ü¶ Ôºª c' ‚à£ v' ‚à£ Œ∫' ÔºΩ‚ñ∑
       ‚Üí c ‚â° c' √ó Œ∫ ‚â° Œ∫'
Lemma‚ÇÜ ‚Ü¶Œ∑‚ÇÅ = refl , refl
Lemma‚ÇÜ ‚Ü¶Œ∑‚ÇÇ = refl , refl

Lemma‚Çá : ‚àÄ {A B v v' Œ∫} {c : A ‚Üî B}
       ‚Üí Ôºª c ‚à£ v ‚à£ Œ∫ ÔºΩ‚óÅ ‚Ü¶ Ôºª c ‚à£ v' ‚à£ Œ∫ ÔºΩ‚ñ∑
       ‚Üí  A ‚â° ùüò
Lemma‚Çá ‚Ü¶Œ∑‚ÇÅ = refl
Lemma‚Çá ‚Ü¶Œ∑‚ÇÇ = refl

Lemma‚Çà : ‚àÄ {A B C D v v' Œ∫ Œ∫'} {c : A ‚Üî B} {c' : C ‚Üî D}
           ‚Üí ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ ‚Ü¶ Ôºª c' ‚à£ v' ‚à£ Œ∫' ÔºΩ‚ñ∑
           ‚Üí A ‚â° C √ó B ‚â° D
Lemma‚Çà ‚Ü¶‚Éó‚ÇÅ = refl , refl
Lemma‚Çà ‚Ü¶‚Éó‚ÇÇ = refl , refl

Lemma‚Çâ : ‚àÄ {A B v v' Œ∫ Œ∫'} {c c' : A ‚Üî B}
           ‚Üí ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ ‚Ü¶ Ôºª c' ‚à£ v' ‚à£ Œ∫' ÔºΩ‚ñ∑
           ‚Üí c ‚â° c' √ó Œ∫ ‚â° Œ∫'
Lemma‚Çâ ‚Ü¶‚Éó‚ÇÅ = refl , refl
Lemma‚Çâ ‚Ü¶‚Éó‚ÇÇ = refl , refl

Lemma‚ÇÅ‚ÇÄ : ‚àÄ {A B v v' Œ∫} {c : A ‚Üî B}
        ‚Üí (r : ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ ‚Ü¶ Ôºª c ‚à£ v' ‚à£ Œ∫ ÔºΩ‚ñ∑)
        ‚Üí base c ‚äé A ‚â° B
Lemma‚ÇÅ‚ÇÄ (‚Ü¶‚Éó‚ÇÅ {b = b}) = inj‚ÇÅ b
Lemma‚ÇÅ‚ÇÄ ‚Ü¶‚Éó‚ÇÇ = inj‚ÇÇ refl

Lemma‚ÇÅ‚ÇÅ : ‚àÄ {A v v' Œ∫} {c : A ‚Üî A}
       ‚Üí (r : ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü©‚ñ∑ ‚Ü¶ Ôºª c ‚à£ v' ‚à£ Œ∫ ÔºΩ‚ñ∑)
       ‚Üí base c ‚äé c ‚â° id‚Üî
Lemma‚ÇÅ‚ÇÅ (‚Ü¶‚Éó‚ÇÅ {b = b}) = inj‚ÇÅ b
Lemma‚ÇÅ‚ÇÅ ‚Ü¶‚Éó‚ÇÇ = inj‚ÇÇ refl
