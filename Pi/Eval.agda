module Pi.Eval where
open import Data.Empty
open import Data.Unit
open import Data.Sum
open import Data.Product
open import Data.List as L hiding (_‚à∑_)
open import Relation.Binary.PropositionalEquality
open import Pi.Syntax
open import Pi.Opsem
open import Pi.NoRepeat

-- Stuck states must be of the form Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ
Stuck : ‚àÄ {st} ‚Üí is-stuck st
      ‚Üí (Œ£[ A ‚àà ùïå ] Œ£[ B ‚àà ùïå ] Œ£[ c ‚àà A ‚Üî B ] Œ£[ v ‚àà ‚ü¶ B ‚üß ] st ‚â° Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ)
Stuck {‚ü® unite‚Çäl  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® uniti‚Çäl  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® swap‚Çä    ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® assocl‚Çä  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® assocr‚Çä  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® unite‚ãÜl  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® uniti‚ãÜl  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® swap‚ãÜ    ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® assocl‚ãÜ  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® assocr‚ãÜ  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® dist     ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® factor   ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® absorbr  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® factorzl ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® id‚Üî      ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÇ))
Stuck {‚ü® c‚ÇÅ ‚®æ c‚ÇÇ  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÉ))
Stuck {‚ü® c‚ÇÅ ‚äï c‚ÇÇ  ‚à£ inj‚ÇÅ x  ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÑ))
Stuck {‚ü® c‚ÇÅ ‚äï c‚ÇÇ  ‚à£ inj‚ÇÇ y  ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÖ))
Stuck {‚ü® c‚ÇÅ ‚äó c‚ÇÇ  ‚à£ (x , y) ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÜ))
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê               ÔºΩ} stuck = _ , _ , _ , _ , refl
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫       ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Çá))
Stuck {Ôºª c ‚à£ v ‚à£ c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫        ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ‚ÇÄ))
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫       ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ‚ÇÅ))
Stuck {Ôºª c ‚à£ v ‚à£ c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫        ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ‚ÇÇ))
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê‚äó[ c‚ÇÇ , y ]‚Ä¢ Œ∫ ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Çà))
Stuck {Ôºª c ‚à£ v ‚à£ [ c‚ÇÅ , x ]‚äó‚òê‚Ä¢ Œ∫ ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Çâ))

-- Auxiliary function for forward evaluator
ev : ‚àÄ {A B Œ∫} ‚Üí (c : A ‚Üî B) (v : ‚ü¶ A ‚üß) ‚Üí Œ£[ v' ‚àà ‚ü¶ B ‚üß ] ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü© ‚Ü¶* Ôºª c ‚à£ v' ‚à£ Œ∫ ÔºΩ
ev unite‚Çäl (inj‚ÇÇ v) = v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev uniti‚Çäl v = inj‚ÇÇ v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev swap‚Çä (inj‚ÇÅ v) = inj‚ÇÇ v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev swap‚Çä (inj‚ÇÇ v) = inj‚ÇÅ v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev assocl‚Çä (inj‚ÇÅ v) = inj‚ÇÅ (inj‚ÇÅ v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev assocl‚Çä (inj‚ÇÇ (inj‚ÇÅ v)) = inj‚ÇÅ (inj‚ÇÇ v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev assocl‚Çä (inj‚ÇÇ (inj‚ÇÇ v)) = inj‚ÇÇ v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev assocr‚Çä (inj‚ÇÅ (inj‚ÇÅ v)) = inj‚ÇÅ v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev assocr‚Çä (inj‚ÇÅ (inj‚ÇÇ v)) = inj‚ÇÇ (inj‚ÇÅ v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev assocr‚Çä (inj‚ÇÇ v) = inj‚ÇÇ (inj‚ÇÇ v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev unite‚ãÜl (tt , v) = v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev uniti‚ãÜl v = (tt , v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev swap‚ãÜ (x , y) = (y , x) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev assocl‚ãÜ (x , (y , z)) = ((x , y) , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev assocr‚ãÜ ((x , y) , z) = (x , (y , z)) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev dist (inj‚ÇÅ x , z) = inj‚ÇÅ (x , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev dist (inj‚ÇÇ y , z) = inj‚ÇÇ (y , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev factor (inj‚ÇÅ (x , z)) = (inj‚ÇÅ x , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev factor (inj‚ÇÇ (y , z)) = (inj‚ÇÇ y , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev id‚Üî v = v , (‚Ü¶‚ÇÇ ‚à∑ ‚óæ)
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚®æ c‚ÇÇ) v‚ÇÅ with ev {Œ∫ = ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫} c‚ÇÅ v‚ÇÅ
... | (v‚ÇÇ , c‚ÇÅ‚Ü¶*) with ev {Œ∫ = c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫} c‚ÇÇ v‚ÇÇ
... | (v‚ÇÉ , c‚ÇÇ‚Ü¶*) = v‚ÇÉ , ((‚Ü¶‚ÇÉ ‚à∑ c‚ÇÅ‚Ü¶* ++‚Ü¶ (‚Ü¶‚Çá ‚à∑ ‚óæ)) ++‚Ü¶ (c‚ÇÇ‚Ü¶* ++‚Ü¶ (‚Ü¶‚ÇÅ‚ÇÄ ‚à∑ ‚óæ)))
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÅ x) with ev {Œ∫ = ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫} c‚ÇÅ x
... | x' , c‚ÇÅ‚Ü¶* = inj‚ÇÅ x' , ‚Ü¶‚ÇÑ ‚à∑ c‚ÇÅ‚Ü¶* ++‚Ü¶ (‚Ü¶‚ÇÅ‚ÇÅ ‚à∑ ‚óæ)
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÇ y) with ev {Œ∫ = c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫} c‚ÇÇ y
... | y' , c‚ÇÇ‚Ü¶* = inj‚ÇÇ y' , ‚Ü¶‚ÇÖ ‚à∑ c‚ÇÇ‚Ü¶* ++‚Ü¶ (‚Ü¶‚ÇÅ‚ÇÇ ‚à∑ ‚óæ)
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚äó c‚ÇÇ) (x , y) with ev {Œ∫ = ‚òê‚äó[ c‚ÇÇ , y ]‚Ä¢ Œ∫} c‚ÇÅ x
... | x' , c‚ÇÅ‚Ü¶* with ev {Œ∫ = [ c‚ÇÅ , x' ]‚äó‚òê‚Ä¢ Œ∫} c‚ÇÇ y
... | y' , c‚ÇÇ‚Ü¶* = (x' , y') , ((‚Ü¶‚ÇÜ ‚à∑ c‚ÇÅ‚Ü¶*) ++‚Ü¶ ((‚Ü¶‚Çà ‚à∑ c‚ÇÇ‚Ü¶*) ++‚Ü¶ (‚Ü¶‚Çâ ‚à∑ ‚óæ)))

-- Forward evaluator for Pi
eval : ‚àÄ {A B} ‚Üí (c : A ‚Üî B) ‚Üí ‚ü¶ A ‚üß ‚Üí ‚ü¶ B ‚üß
eval c v = proj‚ÇÅ (ev {Œ∫ = ‚òê} c v)

-- Forward evaluator which returns execution trace
eval‚Çú·µ£ : ‚àÄ {A B} ‚Üí (c : A ‚Üî B) ‚Üí ‚ü¶ A ‚üß ‚Üí List State
eval‚Çú·µ£ c v = convert (proj‚ÇÇ (ev {Œ∫ = ‚òê} c v))
  where
    convert : ‚àÄ {st st'} ‚Üí st ‚Ü¶* st' ‚Üí List State
    convert (‚óæ {st}) = st L.‚à∑ []
    convert (_‚à∑_ {st} r rs) = st L.‚à∑ convert rs

-- Auxiliary function for backward evaluator
ev·µ£‚Çë·µ• : ‚àÄ {A B Œ∫} ‚Üí (c : A ‚Üî B) (v' : ‚ü¶ B ‚üß) ‚Üí Œ£[ v ‚àà ‚ü¶ A ‚üß ] Ôºª c ‚à£ v' ‚à£ Œ∫ ÔºΩ ‚Ü¶·µ£‚Çë·µ•* ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü©
ev·µ£‚Çë·µ• unite‚Çäl v' = inj‚ÇÇ v' , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• uniti‚Çäl (inj‚ÇÇ v') = v' , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• swap‚Çä (inj‚ÇÅ v') = inj‚ÇÇ v' , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• swap‚Çä (inj‚ÇÇ v') = inj‚ÇÅ v' , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocl‚Çä (inj‚ÇÅ (inj‚ÇÅ v')) = inj‚ÇÅ v' , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocl‚Çä (inj‚ÇÅ (inj‚ÇÇ v')) = inj‚ÇÇ (inj‚ÇÅ v') , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocl‚Çä (inj‚ÇÇ v') = inj‚ÇÇ (inj‚ÇÇ v') , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocr‚Çä (inj‚ÇÅ v') = inj‚ÇÅ (inj‚ÇÅ v') , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocr‚Çä (inj‚ÇÇ (inj‚ÇÅ v')) = inj‚ÇÅ (inj‚ÇÇ v') , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocr‚Çä (inj‚ÇÇ (inj‚ÇÇ v')) = inj‚ÇÇ v' , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• unite‚ãÜl v' = (tt , v') , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• uniti‚ãÜl (tt , v') = v' , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• swap‚ãÜ (x' , y') = (y' , x') , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocl‚ãÜ ((x' , y') , z') = (x' , (y' , z')) , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocr‚ãÜ (x' , (y' , z')) = ((x' , y') , z') , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• dist (inj‚ÇÅ (x' , z')) = (inj‚ÇÅ x' , z') , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• dist (inj‚ÇÇ (y' , z')) = (inj‚ÇÇ y' , z') , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• factor (inj‚ÇÅ x' , z') = (inj‚ÇÅ (x' , z')) , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• factor (inj‚ÇÇ y' , z') = (inj‚ÇÇ (y' , z')) , ((‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• id‚Üî v' = v' , ((‚Ü¶‚ÇÇ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• {Œ∫ = Œ∫} (c‚ÇÅ ‚®æ c‚ÇÇ) v‚ÇÉ with ev·µ£‚Çë·µ• {Œ∫ = c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫} c‚ÇÇ v‚ÇÉ
... | (v‚ÇÇ , c‚ÇÇ‚Ü¶·µ£‚Çë·µ•*) with ev·µ£‚Çë·µ• {Œ∫ = ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫} c‚ÇÅ v‚ÇÇ
... | (v‚ÇÅ , c‚ÇÅ‚Ü¶·µ£‚Çë·µ•*) = v‚ÇÅ , ((‚Ü¶‚ÇÅ‚ÇÄ ·µ£‚Çë·µ•) ‚à∑ c‚ÇÇ‚Ü¶·µ£‚Çë·µ•*) ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚Çá ·µ£‚Çë·µ•) ‚à∑ (c‚ÇÅ‚Ü¶·µ£‚Çë·µ•* ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚ÇÉ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)))
ev·µ£‚Çë·µ• {Œ∫ = Œ∫} (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÅ v') with ev·µ£‚Çë·µ• {Œ∫ = ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫} c‚ÇÅ v'
... | v , c‚ÇÅ‚Ü¶·µ£‚Çë·µ•* = inj‚ÇÅ v , ((‚Ü¶‚ÇÅ‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ c‚ÇÅ‚Ü¶·µ£‚Çë·µ•*) ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚ÇÑ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• {Œ∫ = Œ∫} (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÇ v') with ev·µ£‚Çë·µ• {Œ∫ = c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫} c‚ÇÇ v'
... | v , c‚ÇÇ‚Ü¶·µ£‚Çë·µ•* = inj‚ÇÇ v , ((‚Ü¶‚ÇÅ‚ÇÇ ·µ£‚Çë·µ•) ‚à∑ c‚ÇÇ‚Ü¶·µ£‚Çë·µ•*) ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚ÇÖ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• {Œ∫ = Œ∫} (c‚ÇÅ ‚äó c‚ÇÇ) (x' , y') with ev·µ£‚Çë·µ• {Œ∫ = [ c‚ÇÅ , x' ]‚äó‚òê‚Ä¢ Œ∫} c‚ÇÇ y'
... | y , c‚ÇÇ‚Ü¶·µ£‚Çë·µ•* with ev·µ£‚Çë·µ• {Œ∫ = ‚òê‚äó[ c‚ÇÇ , y ]‚Ä¢ Œ∫} c‚ÇÅ x'
... | x , c‚ÇÅ‚Ü¶·µ£‚Çë·µ•* = (x , y) , ((‚Ü¶‚Çâ ·µ£‚Çë·µ•) ‚à∑ c‚ÇÇ‚Ü¶·µ£‚Çë·µ•*) ++‚Ü¶·µ£‚Çë·µ• (((‚Ü¶‚Çà ·µ£‚Çë·µ•) ‚à∑ c‚ÇÅ‚Ü¶·µ£‚Çë·µ•*) ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚ÇÜ ·µ£‚Çë·µ•) ‚à∑ ‚óæ))

-- Backward evaluator for Pi
eval·µ£‚Çë·µ• : ‚àÄ {A B} ‚Üí (c : A ‚Üî B) ‚Üí ‚ü¶ B ‚üß ‚Üí ‚ü¶ A ‚üß
eval·µ£‚Çë·µ• c v' = proj‚ÇÅ (ev·µ£‚Çë·µ• {Œ∫ = ‚òê} c v')
