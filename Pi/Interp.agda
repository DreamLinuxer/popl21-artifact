module Pi.Interp where
open import Data.Unit
open import Data.Product
open import Data.Sum
open import Pi.Syntax
open import Pi.Opsem

-- Big-step intepreter
interp : {A B : ùïå} ‚Üí (A ‚Üî B) ‚Üí ‚ü¶ A ‚üß ‚Üí ‚ü¶ B ‚üß
interp unite‚Çäl (inj‚ÇÇ v)         = v
interp uniti‚Çäl v                = inj‚ÇÇ v
interp swap‚Çä   (inj‚ÇÅ v)         = inj‚ÇÇ v
interp swap‚Çä   (inj‚ÇÇ v)         = inj‚ÇÅ v
interp assocl‚Çä (inj‚ÇÅ v)         = inj‚ÇÅ (inj‚ÇÅ v)
interp assocl‚Çä (inj‚ÇÇ (inj‚ÇÅ v))  = inj‚ÇÅ (inj‚ÇÇ v)
interp assocl‚Çä (inj‚ÇÇ (inj‚ÇÇ v))  = inj‚ÇÇ v
interp assocr‚Çä (inj‚ÇÅ (inj‚ÇÅ v))  = inj‚ÇÅ v
interp assocr‚Çä (inj‚ÇÅ (inj‚ÇÇ v))  = inj‚ÇÇ (inj‚ÇÅ v)
interp assocr‚Çä (inj‚ÇÇ v)         = inj‚ÇÇ (inj‚ÇÇ v)
interp unite‚ãÜl (tt , v)         = v
interp uniti‚ãÜl v                = (tt , v)
interp swap‚ãÜ   (v‚ÇÅ , v‚ÇÇ)        = (v‚ÇÇ , v‚ÇÅ)
interp assocl‚ãÜ (v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ)) = ((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ)
interp assocr‚ãÜ ((v‚ÇÅ , v‚ÇÇ) , v‚ÇÉ) = (v‚ÇÅ , (v‚ÇÇ , v‚ÇÉ))
interp dist    (inj‚ÇÅ v‚ÇÅ , v‚ÇÉ)   = inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ)
interp dist    (inj‚ÇÇ v‚ÇÇ , v‚ÇÉ)   = inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ)
interp factor  (inj‚ÇÅ (v‚ÇÅ , v‚ÇÉ)) = (inj‚ÇÅ v‚ÇÅ , v‚ÇÉ)
interp factor  (inj‚ÇÇ (v‚ÇÇ , v‚ÇÉ)) = (inj‚ÇÇ v‚ÇÇ , v‚ÇÉ)
interp id‚Üî     v                = v
interp (c‚ÇÅ ‚®æ c‚ÇÇ) v = interp c‚ÇÇ (interp c‚ÇÅ v)
interp (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÅ v) = inj‚ÇÅ (interp c‚ÇÅ v)
interp (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÇ v) = inj‚ÇÇ (interp c‚ÇÇ v)
interp (c‚ÇÅ ‚äó c‚ÇÇ) (v‚ÇÅ , v‚ÇÇ) = (interp c‚ÇÅ v‚ÇÅ , interp c‚ÇÇ v‚ÇÇ)
