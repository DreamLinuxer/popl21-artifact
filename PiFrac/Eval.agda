module PiFrac.Eval where
open import Data.Empty
open import Data.Unit hiding (_‚âü_)
open import Data.Sum
open import Data.Product
open import Data.List as L hiding (_‚à∑_)
open import Data.Maybe
open import Relation.Binary.Core
open import Relation.Binary
open import Relation.Nullary
open import Relation.Binary.PropositionalEquality
open import Function using (_‚àò_)
open import PiFrac.Syntax
open import PiFrac.Opsem
open import PiFrac.NoRepeat

-- Stuck states must be either of the form Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ or ‚ä†
Stuck : ‚àÄ {st} ‚Üí is-stuck st
      ‚Üí (Œ£[ A ‚àà ùïå ] Œ£[ B ‚àà ùïå ] Œ£[ c ‚àà A ‚Üî B ] Œ£[ v ‚àà ‚ü¶ B ‚üß ] st ‚â° Ôºª c ‚à£ v ‚à£ ‚òê ÔºΩ) ‚äé st ‚â° ‚ä†
Stuck {‚ü® uniti‚Çäl  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® unite‚Çäl  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® swap‚Çä    ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® assocl‚Çä  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® assocr‚Çä  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® unite‚ãÜl  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® uniti‚ãÜl  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® swap‚ãÜ    ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® assocl‚ãÜ  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® assocr‚ãÜ  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® dist     ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® factor   ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ))
Stuck {‚ü® id‚Üî      ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÇ))
Stuck {‚ü® Œ∑‚Çì v     ‚à£ tt      ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶Œ∑))
Stuck {‚ü® Œµ‚Çì v     ‚à£ v' , ‚Üª  ‚à£ Œ∫ ‚ü©} stuck with v ‚âü v'
... | yes eq  = ‚ä•-elim (stuck (_ , ‚Ü¶Œµ‚ÇÅ {eq = eq}))
... | no  neq = ‚ä•-elim (stuck (_ , ‚Ü¶Œµ‚ÇÇ {neq = neq}))
Stuck {‚ü® c‚ÇÅ ‚®æ c‚ÇÇ  ‚à£ v       ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÉ))
Stuck {‚ü® c‚ÇÅ ‚äï c‚ÇÇ  ‚à£ inj‚ÇÅ x  ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÑ))
Stuck {‚ü® c‚ÇÅ ‚äï c‚ÇÇ  ‚à£ inj‚ÇÇ y  ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÖ))
Stuck {‚ü® c‚ÇÅ ‚äó c‚ÇÇ  ‚à£ (x , y) ‚à£ Œ∫ ‚ü©} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÜ))
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê               ÔºΩ} stuck = inj‚ÇÅ (_ , _ , _ , _ , refl)
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫       ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Çá))
Stuck {Ôºª c ‚à£ v ‚à£ c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫        ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ‚ÇÄ))
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫       ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ‚ÇÅ))
Stuck {Ôºª c ‚à£ v ‚à£ c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫        ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚ÇÅ‚ÇÇ))
Stuck {Ôºª c ‚à£ v ‚à£ ‚òê‚äó[ c‚ÇÇ , y ]‚Ä¢ Œ∫ ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Çà))
Stuck {Ôºª c ‚à£ v ‚à£ [ c‚ÇÅ , x ]‚äó‚òê‚Ä¢ Œ∫ ÔºΩ} stuck = ‚ä•-elim (stuck (_ , ‚Ü¶‚Çâ))
Stuck {‚ä†} stuck = inj‚ÇÇ refl

-- Auxiliary function for forward evaluator
ev : ‚àÄ {A B Œ∫} ‚Üí (c : A ‚Üî B) (v : ‚ü¶ A ‚üß)
   ‚Üí Œ£[ v' ‚àà ‚ü¶ B ‚üß ] ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü© ‚Ü¶* Ôºª c ‚à£ v' ‚à£ Œ∫ ÔºΩ
   ‚äé ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü© ‚Ü¶* ‚ä†
ev uniti‚Çäl v = inj‚ÇÅ ((inj‚ÇÇ v) , ‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev unite‚Çäl (inj‚ÇÇ y) = inj‚ÇÅ (y , ‚Ü¶‚ÇÅ ‚à∑ ‚óæ)
ev swap‚Çä (inj‚ÇÅ v) = inj‚ÇÅ (inj‚ÇÇ v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev swap‚Çä (inj‚ÇÇ v) = inj‚ÇÅ (inj‚ÇÅ v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev assocl‚Çä (inj‚ÇÅ v) = inj‚ÇÅ (inj‚ÇÅ (inj‚ÇÅ v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev assocl‚Çä (inj‚ÇÇ (inj‚ÇÅ v)) = inj‚ÇÅ (inj‚ÇÅ (inj‚ÇÇ v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev assocl‚Çä (inj‚ÇÇ (inj‚ÇÇ v)) = inj‚ÇÅ (inj‚ÇÇ v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev assocr‚Çä (inj‚ÇÅ (inj‚ÇÅ v)) = inj‚ÇÅ (inj‚ÇÅ v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev assocr‚Çä (inj‚ÇÅ (inj‚ÇÇ v)) = inj‚ÇÅ (inj‚ÇÇ (inj‚ÇÅ v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev assocr‚Çä (inj‚ÇÇ v) = inj‚ÇÅ (inj‚ÇÇ (inj‚ÇÇ v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev unite‚ãÜl (tt , v) = inj‚ÇÅ (v , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev uniti‚ãÜl v = inj‚ÇÅ ((tt , v) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev swap‚ãÜ (x , y) = inj‚ÇÅ ((y , x) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev assocl‚ãÜ (x , (y , z)) = inj‚ÇÅ (((x , y) , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev assocr‚ãÜ ((x , y) , z) = inj‚ÇÅ ((x , (y , z)) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev dist (inj‚ÇÅ x , z) = inj‚ÇÅ (inj‚ÇÅ (x , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev dist (inj‚ÇÇ y , z) = inj‚ÇÅ (inj‚ÇÇ (y , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev factor (inj‚ÇÅ (x , z)) = inj‚ÇÅ ((inj‚ÇÅ x , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev factor (inj‚ÇÇ (y , z)) = inj‚ÇÅ ((inj‚ÇÇ y , z) , (‚Ü¶‚ÇÅ ‚à∑ ‚óæ))
ev id‚Üî v = inj‚ÇÅ (v , (‚Ü¶‚ÇÇ ‚à∑ ‚óæ))
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚®æ c‚ÇÇ) v‚ÇÅ with ev {Œ∫ = ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫} c‚ÇÅ v‚ÇÅ
... | inj‚ÇÅ (v‚ÇÇ , c‚ÇÅ‚Ü¶*) with ev {Œ∫ = c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫} c‚ÇÇ v‚ÇÇ
... | inj‚ÇÅ (v‚ÇÉ , c‚ÇÇ‚Ü¶*) = inj‚ÇÅ (v‚ÇÉ , ((‚Ü¶‚ÇÉ ‚à∑ c‚ÇÅ‚Ü¶* ++‚Ü¶ (‚Ü¶‚Çá ‚à∑ ‚óæ)) ++‚Ü¶ (c‚ÇÇ‚Ü¶* ++‚Ü¶ (‚Ü¶‚ÇÅ‚ÇÄ ‚à∑ ‚óæ))))
... | inj‚ÇÇ c‚ÇÇ‚Ü¶* = inj‚ÇÇ ((‚Ü¶‚ÇÉ ‚à∑ c‚ÇÅ‚Ü¶* ++‚Ü¶ (‚Ü¶‚Çá ‚à∑ ‚óæ)) ++‚Ü¶ c‚ÇÇ‚Ü¶*)
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚®æ c‚ÇÇ) v‚ÇÅ | inj‚ÇÇ c‚ÇÅ‚Ü¶* = inj‚ÇÇ (‚Ü¶‚ÇÉ ‚à∑ c‚ÇÅ‚Ü¶*)
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÅ x) with ev {Œ∫ = ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫} c‚ÇÅ x
... | inj‚ÇÅ (x' , c‚ÇÅ‚Ü¶*) = inj‚ÇÅ (inj‚ÇÅ x' , ‚Ü¶‚ÇÑ ‚à∑ c‚ÇÅ‚Ü¶* ++‚Ü¶ (‚Ü¶‚ÇÅ‚ÇÅ ‚à∑ ‚óæ))
... | inj‚ÇÇ c‚ÇÅ‚Ü¶* = inj‚ÇÇ (‚Ü¶‚ÇÑ ‚à∑ c‚ÇÅ‚Ü¶*) 
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÇ y) with ev {Œ∫ = c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫} c‚ÇÇ y
... | inj‚ÇÅ (y' , c‚ÇÇ‚Ü¶*) = inj‚ÇÅ (inj‚ÇÇ y' , ‚Ü¶‚ÇÖ ‚à∑ c‚ÇÇ‚Ü¶* ++‚Ü¶ (‚Ü¶‚ÇÅ‚ÇÇ ‚à∑ ‚óæ))
... | inj‚ÇÇ c‚ÇÇ‚Ü¶* = inj‚ÇÇ (‚Ü¶‚ÇÖ ‚à∑ c‚ÇÇ‚Ü¶*)
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚äó c‚ÇÇ) (x , y) with ev {Œ∫ = ‚òê‚äó[ c‚ÇÇ , y ]‚Ä¢ Œ∫} c‚ÇÅ x
... | inj‚ÇÅ (x' , c‚ÇÅ‚Ü¶*) with ev {Œ∫ = [ c‚ÇÅ , x' ]‚äó‚òê‚Ä¢ Œ∫} c‚ÇÇ y
... | inj‚ÇÅ (y' , c‚ÇÇ‚Ü¶*) = inj‚ÇÅ ((x' , y') , ((‚Ü¶‚ÇÜ ‚à∑ c‚ÇÅ‚Ü¶*) ++‚Ü¶ ((‚Ü¶‚Çà ‚à∑ c‚ÇÇ‚Ü¶*) ++‚Ü¶ (‚Ü¶‚Çâ ‚à∑ ‚óæ))))
... | inj‚ÇÇ c‚ÇÇ‚Ü¶* = inj‚ÇÇ ((‚Ü¶‚ÇÜ ‚à∑ c‚ÇÅ‚Ü¶*) ++‚Ü¶ (‚Ü¶‚Çà ‚à∑ c‚ÇÇ‚Ü¶*))
ev {Œ∫ = Œ∫} (c‚ÇÅ ‚äó c‚ÇÇ) (x , y) | inj‚ÇÇ c‚ÇÅ‚Ü¶* = inj‚ÇÇ (‚Ü¶‚ÇÜ ‚à∑ c‚ÇÅ‚Ü¶*)
ev (Œ∑‚Çì v) tt = inj‚ÇÅ ((v , ‚Üª) , (‚Ü¶Œ∑ ‚à∑ ‚óæ))
ev (Œµ‚Çì v) (v' , ‚Üª) with v ‚âü v'
... | yes eq  = inj‚ÇÅ (tt , (‚Ü¶Œµ‚ÇÅ {eq = eq} ‚à∑ ‚óæ))
... | no  neq = inj‚ÇÇ (‚Ü¶Œµ‚ÇÇ {neq = neq} ‚à∑ ‚óæ)

-- Forward evaluator for PiFrac
eval : ‚àÄ {A B} ‚Üí (c : A ‚Üî B) ‚Üí ‚ü¶ A ‚üß ‚Üí Maybe ‚ü¶ B ‚üß
eval c v = [ just ‚àò proj‚ÇÅ , (Œª _ ‚Üí nothing) ]‚Ä≤ (ev {Œ∫ = ‚òê} c v)

-- Forward evaluator which returns execution trace
eval‚Çú·µ£ : ‚àÄ {A B} ‚Üí (c : A ‚Üî B) ‚Üí ‚ü¶ A ‚üß ‚Üí List State
eval‚Çú·µ£ c v = [ convert ‚àò proj‚ÇÇ , convert ]‚Ä≤ (ev {Œ∫ = ‚òê} c v)
  where
    convert : ‚àÄ {st st'} ‚Üí st ‚Ü¶* st' ‚Üí List State
    convert (‚óæ {st}) = st L.‚à∑ []
    convert (_‚à∑_ {st} r rs) = st L.‚à∑ convert rs

-- Auxiliary function for backward evaluator
ev·µ£‚Çë·µ• : ‚àÄ {A B Œ∫} ‚Üí (c : A ‚Üî B) (v : ‚ü¶ B ‚üß)
      ‚Üí Œ£[ v' ‚àà ‚ü¶ A ‚üß ] Ôºª c ‚à£ v ‚à£ Œ∫ ÔºΩ ‚Ü¶·µ£‚Çë·µ•* ‚ü® c ‚à£ v' ‚à£ Œ∫ ‚ü©
      ‚äé ‚àÉ[ A ] (‚àÉ[ v' ] (‚àÉ[ v'' ] (‚àÉ[ Œ∫' ] (v' ‚â¢ v'' √ó Ôºª c ‚à£ v ‚à£ Œ∫ ÔºΩ ‚Ü¶·µ£‚Çë·µ•* Ôºª Œ∑‚Çì {A} v' ‚à£ (v'' , ‚Üª) ‚à£ Œ∫' ÔºΩ))))
ev·µ£‚Çë·µ• uniti‚Çäl (inj‚ÇÇ v) = inj‚ÇÅ (v , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ• ‚à∑ ‚óæ))
ev·µ£‚Çë·µ• unite‚Çäl v = inj‚ÇÅ ((inj‚ÇÇ v) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ• ‚à∑ ‚óæ))
ev·µ£‚Çë·µ• swap‚Çä (inj‚ÇÅ x) = inj‚ÇÅ (inj‚ÇÇ x , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• swap‚Çä (inj‚ÇÇ y) = inj‚ÇÅ (inj‚ÇÅ y , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocl‚Çä (inj‚ÇÅ (inj‚ÇÅ x)) = inj‚ÇÅ (inj‚ÇÅ x , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocl‚Çä (inj‚ÇÅ (inj‚ÇÇ y)) = inj‚ÇÅ (inj‚ÇÇ (inj‚ÇÅ y) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocl‚Çä (inj‚ÇÇ z) = inj‚ÇÅ (inj‚ÇÇ (inj‚ÇÇ z) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocr‚Çä (inj‚ÇÅ x) = inj‚ÇÅ (inj‚ÇÅ (inj‚ÇÅ x) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocr‚Çä (inj‚ÇÇ (inj‚ÇÅ y)) = inj‚ÇÅ (inj‚ÇÅ (inj‚ÇÇ y) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocr‚Çä (inj‚ÇÇ (inj‚ÇÇ z)) = inj‚ÇÅ (inj‚ÇÇ z , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• unite‚ãÜl v = inj‚ÇÅ ((tt , v) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• uniti‚ãÜl (tt , v) = inj‚ÇÅ (v , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• swap‚ãÜ (x , y) = inj‚ÇÅ ((y , x) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocl‚ãÜ ((x , y) , z) = inj‚ÇÅ ((x , (y , z)) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• assocr‚ãÜ (x , (y , z)) = inj‚ÇÅ (((x , y) , z) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• dist (inj‚ÇÅ (x , z)) = inj‚ÇÅ ((inj‚ÇÅ x , z) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• dist (inj‚ÇÇ (y , z)) = inj‚ÇÅ ((inj‚ÇÇ y , z) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• factor (inj‚ÇÅ x , z) = inj‚ÇÅ (inj‚ÇÅ (x , z) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• factor (inj‚ÇÇ y , z) = inj‚ÇÅ (inj‚ÇÇ (y , z) , (‚Ü¶‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• id‚Üî v = inj‚ÇÅ (v , (‚Ü¶‚ÇÇ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)
ev·µ£‚Çë·µ• {Œ∫ = Œ∫} (c‚ÇÅ ‚®æ c‚ÇÇ) v‚ÇÉ with ev·µ£‚Çë·µ• {Œ∫ = c‚ÇÅ ‚®æ‚òê‚Ä¢ Œ∫} c‚ÇÇ v‚ÇÉ
... | inj‚ÇÅ (v‚ÇÇ , rs) with ev·µ£‚Çë·µ• {Œ∫ = ‚òê‚®æ c‚ÇÇ ‚Ä¢ Œ∫} c‚ÇÅ v‚ÇÇ
... | inj‚ÇÅ (v‚ÇÅ , rs') = inj‚ÇÅ (v‚ÇÅ , ((‚Ü¶‚ÇÅ‚ÇÄ ·µ£‚Çë·µ•) ‚à∑ (rs ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚Çá ·µ£‚Çë·µ•) ‚à∑ ‚óæ))) ++‚Ü¶·µ£‚Çë·µ• (rs' ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚ÇÉ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)))
... | inj‚ÇÇ (_ , _ , _ , _ , neq , rs') = inj‚ÇÇ (_ , _ , _ , _ , neq , (((‚Ü¶‚ÇÅ‚ÇÄ ·µ£‚Çë·µ•) ‚à∑ (rs ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚Çá ·µ£‚Çë·µ•) ‚à∑ ‚óæ))) ++‚Ü¶·µ£‚Çë·µ• rs'))
ev·µ£‚Çë·µ• (c‚ÇÅ ‚®æ c‚ÇÇ) v‚ÇÉ | inj‚ÇÇ (_ , _ , _ , _ , neq , rs) = inj‚ÇÇ (_ , _ , _ , _ , neq , (((‚Ü¶‚ÇÅ‚ÇÄ ·µ£‚Çë·µ•) ‚à∑ ‚óæ) ++‚Ü¶·µ£‚Çë·µ• rs))
ev·µ£‚Çë·µ• {Œ∫ = Œ∫} (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÅ x) with ev·µ£‚Çë·µ• {Œ∫ = ‚òê‚äï c‚ÇÇ ‚Ä¢ Œ∫} c‚ÇÅ x
... | inj‚ÇÅ (x' , rs) = inj‚ÇÅ (inj‚ÇÅ x' , (‚Ü¶‚ÇÅ‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ (rs ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚ÇÑ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)))
... | inj‚ÇÇ (_ , _ , _ , _ , neq , rs) = inj‚ÇÇ (_ , _ , _ , _ , neq , (‚Ü¶‚ÇÅ‚ÇÅ ·µ£‚Çë·µ•) ‚à∑ rs)
ev·µ£‚Çë·µ• {Œ∫ = Œ∫} (c‚ÇÅ ‚äï c‚ÇÇ) (inj‚ÇÇ y) with ev·µ£‚Çë·µ• {Œ∫ = c‚ÇÅ ‚äï‚òê‚Ä¢ Œ∫} c‚ÇÇ y
... | inj‚ÇÅ (y' , rs) = inj‚ÇÅ (inj‚ÇÇ y' , (‚Ü¶‚ÇÅ‚ÇÇ ·µ£‚Çë·µ•) ‚à∑ (rs ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚ÇÖ ·µ£‚Çë·µ•) ‚à∑ ‚óæ)))
... | inj‚ÇÇ (_ , _ , _ , _ , neq , rs) = inj‚ÇÇ (_ , _ , _ , _ , neq , (‚Ü¶‚ÇÅ‚ÇÇ ·µ£‚Çë·µ•) ‚à∑ rs)
ev·µ£‚Çë·µ• {Œ∫ = Œ∫} (c‚ÇÅ ‚äó c‚ÇÇ) (x , y) with ev·µ£‚Çë·µ• {Œ∫ = [ c‚ÇÅ , x ]‚äó‚òê‚Ä¢ Œ∫} c‚ÇÇ y
... | inj‚ÇÅ (y' , rs) with ev·µ£‚Çë·µ• {Œ∫ = ‚òê‚äó[ c‚ÇÇ , y' ]‚Ä¢ Œ∫} c‚ÇÅ x
... | inj‚ÇÅ (x' , rs') = inj‚ÇÅ ((x' , y') , (((‚Ü¶‚Çâ ·µ£‚Çë·µ•) ‚à∑ (rs ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚Çà ·µ£‚Çë·µ•) ‚à∑ ‚óæ))) ++‚Ü¶·µ£‚Çë·µ• (rs' ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚ÇÜ ·µ£‚Çë·µ•) ‚à∑ ‚óæ))))
... | inj‚ÇÇ (_ , _ , _ , _ , neq , rs') = inj‚ÇÇ (_ , _ , _ , _ , neq , (((‚Ü¶‚Çâ ·µ£‚Çë·µ•) ‚à∑ (rs ++‚Ü¶·µ£‚Çë·µ• ((‚Ü¶‚Çà ·µ£‚Çë·µ•) ‚à∑ ‚óæ))) ++‚Ü¶·µ£‚Çë·µ• rs'))
ev·µ£‚Çë·µ• (c‚ÇÅ ‚äó c‚ÇÇ) (x , y) | inj‚ÇÇ (_ , _ , _ , _ , neq , rs) = inj‚ÇÇ (_ , _ , _ , _ , neq , ((‚Ü¶‚Çâ ·µ£‚Çë·µ•) ‚à∑ rs))
ev·µ£‚Çë·µ• (Œ∑‚Çì v) (v' , ‚Üª) with v ‚âü v'
... | yes refl = inj‚ÇÅ (tt , ((‚Ü¶Œ∑ ·µ£‚Çë·µ•) ‚à∑ ‚óæ))
... | no  neq  = inj‚ÇÇ (_ , _ , _ , _ , neq , ‚óæ)
ev·µ£‚Çë·µ• (Œµ‚Çì v) tt = inj‚ÇÅ ((v , ‚Üª) , ((‚Ü¶Œµ‚ÇÅ {eq = refl} ·µ£‚Çë·µ•) ‚à∑ ‚óæ))

-- Backward evaluator for Pi
eval·µ£‚Çë·µ• : ‚àÄ {A B} ‚Üí (c : A ‚Üî B) ‚Üí ‚ü¶ B ‚üß ‚Üí Maybe ‚ü¶ A ‚üß
eval·µ£‚Çë·µ• c v = [ just ‚àò proj‚ÇÅ , (Œª _ ‚Üí nothing) ]‚Ä≤ (ev·µ£‚Çë·µ• {Œ∫ = ‚òê} c v)
