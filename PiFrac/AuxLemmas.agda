module PiFrac.AuxLemmas where
open import Data.Empty
open import Data.Unit hiding (_‚âü_)
open import Data.Sum
open import Data.Product
open import Relation.Binary.Core
open import Relation.Binary
open import Relation.Nullary
open import Relation.Binary.PropositionalEquality
open import Function using (_‚àò_)
open import PiFrac.Syntax
open import PiFrac.Opsem

Lemma‚ÇÅ : ‚àÄ {A B C D v v' Œ∫ Œ∫'} {c : A ‚Üî B} {c' : C ‚Üî D}
       ‚Üí ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü© ‚Ü¶ Ôºª c' ‚à£ v' ‚à£ Œ∫' ÔºΩ
       ‚Üí (A ‚â° C √ó B ‚â° D)
Lemma‚ÇÅ ‚Ü¶‚ÇÅ = refl , refl
Lemma‚ÇÅ ‚Ü¶‚ÇÇ = refl , refl
Lemma‚ÇÅ ‚Ü¶Œ∑ = refl , refl
Lemma‚ÇÅ ‚Ü¶Œµ‚ÇÅ = refl , refl

Lemma‚ÇÇ : ‚àÄ {A B v v' Œ∫ Œ∫'} {c c' : A ‚Üî B}
       ‚Üí ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü© ‚Ü¶ Ôºª c' ‚à£ v' ‚à£ Œ∫' ÔºΩ
       ‚Üí c ‚â° c' √ó Œ∫ ‚â° Œ∫'
Lemma‚ÇÇ ‚Ü¶‚ÇÅ = refl , refl
Lemma‚ÇÇ ‚Ü¶‚ÇÇ = refl , refl
Lemma‚ÇÇ ‚Ü¶Œ∑ = refl , refl
Lemma‚ÇÇ ‚Ü¶Œµ‚ÇÅ = refl , refl

Lemma‚ÇÉ : ‚àÄ {A B v v' Œ∫} {c : A ‚Üî B}
       ‚Üí (r : ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü© ‚Ü¶ Ôºª c ‚à£ v' ‚à£ Œ∫ ÔºΩ)
       ‚Üí base c ‚äé dual c ‚äé A ‚â° B
Lemma‚ÇÉ (‚Ü¶‚ÇÅ {b = b}) = inj‚ÇÅ b
Lemma‚ÇÉ ‚Ü¶‚ÇÇ = inj‚ÇÇ (inj‚ÇÇ refl)
Lemma‚ÇÉ ‚Ü¶Œ∑ = inj‚ÇÇ (inj‚ÇÅ tt)
Lemma‚ÇÉ ‚Ü¶Œµ‚ÇÅ = inj‚ÇÇ (inj‚ÇÅ tt)

Lemma‚ÇÑ : ‚àÄ {A v v' Œ∫} {c : A ‚Üî A}
       ‚Üí (r : ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü© ‚Ü¶ Ôºª c ‚à£ v' ‚à£ Œ∫ ÔºΩ)
       ‚Üí base c ‚äé c ‚â° id‚Üî
Lemma‚ÇÑ {c = swap‚Çä} ‚Ü¶‚ÇÅ = inj‚ÇÅ tt
Lemma‚ÇÑ {c = swap‚ãÜ} ‚Ü¶‚ÇÅ = inj‚ÇÅ tt
Lemma‚ÇÑ ‚Ü¶‚ÇÇ = inj‚ÇÇ refl

Lemma‚ÇÖ : ‚àÄ {A B v v' b Œ∫} {c : A ‚Üî B √ó·µ§ ùüô/ b}
        ‚Üí (r : ‚ü® c ‚à£ v ‚à£ Œ∫ ‚ü© ‚Ü¶ Ôºª c ‚à£ v' ‚à£ Œ∫ ÔºΩ)
        ‚Üí base c ‚äé (b , ‚Üª) ‚â° v' ‚äé ¬¨ (dual c)
Lemma‚ÇÖ (‚Ü¶‚ÇÅ {b = b}) = inj‚ÇÅ b
Lemma‚ÇÖ ‚Ü¶‚ÇÇ = inj‚ÇÇ (inj‚ÇÇ (Œª ()))
Lemma‚ÇÖ ‚Ü¶Œ∑ = inj‚ÇÇ (inj‚ÇÅ refl)

Lemma‚ÇÜ : ‚àÄ {A v v' Œ∫} ‚Üí v ‚â¢ v' ‚Üí ‚àÑ[ st' ] (st' ‚Ü¶ Ôºª Œ∑‚Çì {A} v ‚à£ v' , ‚Üª ‚à£ Œ∫ ÔºΩ)
Lemma‚ÇÜ neq (‚ü® _ ‚à£ v ‚à£ _ ‚ü© , r) with Lemma‚ÇÅ r
... | refl , refl with Lemma‚ÇÇ r
... | refl , refl with Lemma‚ÇÖ r
... | inj‚ÇÇ (inj‚ÇÅ refl) = neq refl
... | inj‚ÇÇ (inj‚ÇÇ nd) = nd tt
